// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  isAdmin        Boolean   @default(false)
  firstName      String?
  lastName       String?
  username       String?   @unique
  bio            String?
  location       String?
  portfolio      String?
  profileUrl     String?
  accounts       Account[]
  Session        Session[]
  favoriteMovies Movie[] // Add this line for favorite movies relationship
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id                    Int      @id @default(autoincrement())
  userId                String
  backdrop_path         String?
  belongs_to_collection Json?
  homepage              String?
  movieId               Int      @unique
  original_title        String?
  popularity            Float?
  poster_path           String?
  tagline               String?
  title                 String?
  video                 Boolean?
  vote_average          Float?
  vote_count            Int?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
